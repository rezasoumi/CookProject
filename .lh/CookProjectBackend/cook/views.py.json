{
    "sourceFile": "CookProjectBackend/cook/views.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1678449670995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1678449683989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -250,9 +250,9 @@\n     return HttpResponse(ObjectListResponse(recipes).json)\r\n \r\n def view_recipe_by_id(request, recipe_id):\r\n     recipe = Recipe.objects.get(pk=recipe_id)\r\n-    return HttpResponse(InfoResponse(recipe).json)\r\n+    return HttpResponse(FoodInfoResponse(recipe).json)\r\n \r\n @require_http_methods([\"POST\"])\r\n def add_recipe_photo(request, recipe_id):\r\n     recipe: Recipe = get_object_else('recipe_id', recipe_id, Recipe)\r\n"
                }
            ],
            "date": 1678449670995,
            "name": "Commit-0",
            "content": "from django.http import HttpResponse, JsonResponse\r\nfrom django.utils import timezone\r\nfrom django.views.decorators.http import require_http_methods\r\nfrom .models import *\r\nfrom .dto.request import *\r\nfrom .dto.response import *\r\nimport json\r\nfrom django.db import models\r\n\r\n\r\n@require_http_methods([\"POST\"])\r\ndef register_user(request):\r\n    request_model = UserRegistrationRequest(request)\r\n    if get_object_else(('username', 'email'), (request_model.username, request_model.email), SystemUser, True):\r\n        return HttpResponse(ErrorResponse(InternalError.ACCOUNT_EXISTS).json)\r\n    user = SystemUser.objects.create(username=request_model.username, first_name=request_model.first_name,\r\n                                     last_name=request_model.last_name, email=request_model.email)\r\n    user.set_password(request_model.password)\r\n    user.save()\r\n    chief = Chief(user=user, bio=\"dsdakladjsk\")\r\n    chief.save()\r\n    return HttpResponse()\r\n\r\n\r\n@require_http_methods([\"POST\"])\r\ndef login_user(request):\r\n    request_model = UserLoginRequest(request)\r\n    user: SystemUser = get_object_else('username', request_model.username, SystemUser)\r\n    if user:\r\n        if not user.check_password(request_model.password):\r\n            return HttpResponse(ErrorResponse(InternalError.CREDENTIAL_MISMATCH).json)\r\n        user.last_login = timezone.now()\r\n        user.save()\r\n        return HttpResponse(ObjectInfoResponse(user).json)\r\n    else:\r\n        return HttpResponse(ErrorResponse(InternalError.CREDENTIAL_MISMATCH).json)\r\n\r\n\r\n@require_http_methods([\"PUT\"])\r\ndef logout_user(request):\r\n    request_model = UserLogoutRequest(request)\r\n    if get_object_else('username', request_model.username, SystemUser, True):\r\n        return HttpResponse()\r\n    else:\r\n        return HttpResponse(ErrorResponse(InternalError.CREDENTIAL_MISMATCH).json)\r\n\r\n\r\n@require_http_methods([\"GET\", \"PATCH\"])\r\ndef profile(request, username):\r\n    current_username = request.GET.get('username').replace('\"', '')\r\n    user: SystemUser = get_object_else('username', username, SystemUser)\r\n    if not user:\r\n        return HttpResponse(ErrorResponse(InternalError.CREDENTIAL_MISMATCH).json)\r\n    chief = None\r\n    if user.role == Role.CHIEF:\r\n        chief = get_object_else('user__username', username, Chief)\r\n    elif username != current_username:\r\n        return HttpResponse(ErrorResponse(InternalError.UNAUTHORIZED).json)\r\n    if request.method == \"GET\":\r\n        return HttpResponse(ObjectInfoResponse(user, chief).json)\r\n    if request.method == \"PATCH\":\r\n        request_model = UserUpdateProfileRequest(request)\r\n        update_profile(request_model, user, chief)\r\n        return HttpResponse(ObjectInfoResponse(user, chief).json)\r\n\r\n\r\ndef update_profile(request, user, chief):\r\n    user.first_name = request.first_name\r\n    user.last_name = request.last_name\r\n    user.email = request.email\r\n    if chief:\r\n        chief.bio = request.bio\r\n        chief.save()\r\n    user.save()\r\n\r\n\r\n@require_http_methods([\"GET\"])\r\ndef view_followers(request, jesus_username):\r\n    user: SystemUser = get_object_else('username', jesus_username, SystemUser)\r\n    if not user:\r\n        return HttpResponse(ErrorResponse(InternalError.ACCOUNT_NOT_FOUND).json)\r\n    if user.role != Role.CHIEF.value:\r\n        return HttpResponse(ErrorResponse(InternalError.NOT_ALLOWED).json)\r\n    chief: Chief = get_object_else('user__username', jesus_username, Chief)\r\n    followers = [relationship.disciple for relationship in chief.relationship_set.all()]\r\n    return HttpResponse(ObjectListResponse(followers).json)\r\n\r\n@require_http_methods([\"GET\"])\r\ndef has_user_followed_chief(request, jesus_username):\r\n    current_username = request.GET.get('username').replace('\"', '')\r\n    user: SystemUser = get_object_else('username', jesus_username, SystemUser)\r\n    if not user:\r\n        return HttpResponse(ErrorResponse(InternalError.ACCOUNT_NOT_FOUND).json)\r\n    if user.role != Role.CHIEF.value:\r\n        return HttpResponse(ErrorResponse(InternalError.NOT_ALLOWED).json)\r\n    chief: Chief = get_object_else('user__username', jesus_username, Chief)\r\n    followers = [relationship.disciple for relationship in chief.relationship_set.all()]\r\n    for follower in followers:\r\n        if (follower.username == current_username):\r\n            return HttpResponse(\"True\")\r\n    return HttpResponse(\"False\")\r\n\r\n\r\n@require_http_methods([\"GET\"])\r\ndef view_following(request, username):\r\n    user: SystemUser = get_object_else('username', username, SystemUser)\r\n    if not user:\r\n        return HttpResponse(ErrorResponse(InternalError.ACCOUNT_NOT_FOUND).json)\r\n    following = [relationship.jesus.user for relationship in user.relationship_set.all()]\r\n    return HttpResponse(ObjectListResponse(following).json)\r\n\r\n\r\n@require_http_methods([\"POST\", \"GET\"])\r\ndef tickets(request):\r\n    if request.method == \"GET\":\r\n        return view_all_tickets(request)\r\n    if request.method == \"POST\":\r\n        return create_ticket(request)\r\n\r\n\r\ndef create_ticket(request):\r\n    request_model = CreateTicketRequest(request)\r\n    user: SystemUser = get_object_else('username', request_model.username.replace('\"', \"\"), SystemUser)\r\n    if not user:\r\n        return HttpResponse(ErrorResponse(InternalError.ACCOUNT_NOT_FOUND))\r\n    ticket = Ticket(user=user, category=request_model.category, status=TicketStatus.NEW.value, text=request_model.text)\r\n    ticket.save()\r\n    return HttpResponse(CreationResponse(ticket.ticket_id).json)\r\n\r\n\r\ndef view_all_tickets(request):\r\n    username = request.GET.get('username').replace('\"', \"\")\r\n    user: SystemUser = get_object_else('username', username, SystemUser)\r\n    if not user:\r\n        return HttpResponse(ErrorResponse(InternalError.ACCOUNT_NOT_FOUND))\r\n    return HttpResponse(ObjectListResponse(user.ticket_set.all()).json)\r\n\r\n\r\n@require_http_methods([\"GET\"])\r\ndef view_ticket(request, ticket_id):\r\n    ticket: Ticket = get_object_else('ticket_id', ticket_id, Ticket)\r\n    if not ticket:\r\n        return HttpResponse(ErrorResponse(InternalError.TICKET_NOT_FOUND).json)\r\n    return HttpResponse(ObjectInfoResponse(ticket).json)\r\n\r\n\r\n@require_http_methods([\"PATCH\"])\r\ndef update_ticket(request, ticket_id):\r\n    assignee_username = request.GET.get('assignee')\r\n    assignee: SystemUser = get_object_else('username', assignee_username, SystemUser)\r\n    if not assignee:\r\n        return HttpResponse(ErrorResponse(InternalError.ACCOUNT_NOT_FOUND).json)\r\n    request_model = ModifyTicketRequest(request)\r\n    status = request_model.status\r\n    ticket: Ticket = get_object_else('ticket_id', ticket_id, Ticket)\r\n    if not ticket:\r\n        return HttpResponse(ErrorResponse(InternalError.TICKET_NOT_FOUND).json)\r\n    if not TicketStatus.check_next_status_validity(ticket.status, status, assignee.role):\r\n        return HttpResponse(ErrorResponse(InternalError.NOT_ALLOWED).json)\r\n    user = ticket.user\r\n    if assignee.role != Role.ADMIN.value and assignee_username != user.username:\r\n        return HttpResponse(ErrorResponse(InternalError.UNAUTHORIZED).json)\r\n    ticket.status = status\r\n    ticket.text = ticket.text + \"\\n***\\n\" + request_model.text\r\n    ticket.save()\r\n    if status == TicketStatus.DONE and TicketCategory.get_category(ticket.category) == TicketCategory.CHIEF_VERIFY:\r\n        upgrade_to_chief(user)\r\n    return HttpResponse(ObjectInfoResponse(ticket).json)\r\n\r\n\r\ndef upgrade_to_chief(user: SystemUser):\r\n    user.role = Role.CHIEF.value\r\n    user.save()\r\n    chief = Chief(user=user)\r\n    chief.save()\r\n\r\n\r\n@require_http_methods([\"POST\", \"GET\"])\r\ndef foodstuffs(request):\r\n    if request.method == \"GET\":\r\n        return view_foodstuffs(request)\r\n    if request.method == \"POST\":\r\n        return create_foodstuff(request)\r\n\r\n\r\ndef create_foodstuff(request):\r\n    request_model = AddFoodstuffRequest(request)\r\n    if get_object_else('name', request_model.name, Foodstuff, True):\r\n        return HttpResponse(ErrorResponse(InternalError.FOODSTUFF_EXISTS).json)\r\n    foodstuff = Foodstuff.objects.create(name=request_model.name, price=request_model.price)\r\n    foodstuff.save()\r\n    return HttpResponse()\r\n\r\n\r\ndef view_foodstuffs(request):\r\n    foodstuffs = Foodstuff.objects.all()\r\n    serializedData = json.dumps([{'label': f.name,\r\n                                  'value': f.name,\r\n                                  } for f in foodstuffs])\r\n    return HttpResponse(serializedData, content_type=\"application/json\")\r\n    # return HttpResponse(ObjectListResponse(foodstuffs).json)\r\n\r\n\r\n@require_http_methods([\"POST\", \"GET\"])\r\ndef recipes(request):\r\n    if request.method == \"GET\":\r\n        return view_all_recipes(request)\r\n    if request.method == \"POST\":\r\n        print(\"gavvv\")\r\n        return create_recipe(request)\r\n    \r\n@require_http_methods([\"GET\"])\r\ndef recipes2(request):\r\n    recipe_id = request.GET.get('recipe_id')\r\n    return view_recipe_by_id(request, recipe_id)\r\n\r\n\r\ndef create_recipe(request):\r\n    request_model = CreateRecipeRequest(request)\r\n    if get_object_else('name', request_model.name, Recipe, True):\r\n        return HttpResponse(ErrorResponse(InternalError.RECIPE_EXIST).json)\r\n    print(1000)\r\n    chief: Chief = get_object_else('user__username', request_model.chief, Chief)\r\n    if not chief:\r\n        return HttpResponse(ErrorResponse(InternalError.ACCOUNT_NOT_FOUND).json)\r\n    recipe = Recipe.objects.create(name=request_model.name, chief=chief, description=request_model.description,\r\n                                   category=request_model.category, difficulty=request_model.difficulty,\r\n                                   preparation_time=request_model.preparation_time, meal_tags=request_model.meal_tags)\r\n    ingredients = [IngredientInfoRequest(ingredient) for ingredient in request_model.ingredients]\r\n    for item in ingredients:\r\n        ingredient: Ingredient = get_object_else(('foodstuff__name', 'amount', 'unit'),\r\n                                                 (item.foodstuff, item.amount, item.unit), Ingredient)\r\n        if not ingredient:\r\n            foodstuff: Foodstuff = get_object_else('name', item.foodstuff, Foodstuff)\r\n            if not foodstuff:\r\n                print(item.foodstuff)\r\n                recipe.delete()\r\n                return HttpResponse(ErrorResponse(InternalError.FOODSTUFF_NOT_FOUND).json)\r\n            ingredient = Ingredient(foodstuff=foodstuff, amount=item.amount, unit=item.unit)\r\n            ingredient.save()\r\n        print(\"xxxx\", ingredient.amount)\r\n        recipe.price += ingredient.amount * ingredient.foodstuff.price\r\n        recipe.ingredients.add(ingredient)\r\n    recipe.save()\r\n    return HttpResponse(ObjectInfoResponse(recipe).json)\r\n\r\n\r\ndef view_all_recipes(request):\r\n    recipes = Recipe.objects.all()\r\n    return HttpResponse(ObjectListResponse(recipes).json)\r\n\r\ndef view_recipe_by_id(request, recipe_id):\r\n    recipe = Recipe.objects.get(pk=recipe_id)\r\n    return HttpResponse(InfoResponse(recipe).json)\r\n\r\n@require_http_methods([\"POST\"])\r\ndef add_recipe_photo(request, recipe_id):\r\n    recipe: Recipe = get_object_else('recipe_id', recipe_id, Recipe)\r\n    if not recipe:\r\n        return HttpResponse(ErrorResponse(InternalError.RECIPE_NOT_FOUND).json)\r\n    recipe.photo = request.FILES['photo']\r\n    recipe.save()\r\n    return HttpResponse(ObjectInfoResponse(recipe).json)\r\n\r\n\r\n@require_http_methods([\"DELETE\"])\r\ndef remove_recipe(request, recipe_id):\r\n    recipe: Recipe = get_object_else('recipe_id', recipe_id, Recipe)\r\n    if not recipe:\r\n        return HttpResponse(ErrorResponse(InternalError.RECIPE_NOT_FOUND).json)\r\n    recipe.delete()\r\n    return HttpResponse(ObjectInfoResponse(recipe).json)\r\n\r\n\r\n@require_http_methods([\"GET\"])\r\ndef filter_recipe(request):\r\n    criterion = request.GET.get('criterion')\r\n    value = request.GET.get(criterion)\r\n    recipes = Recipe.objects.filter(**{criterion: value}).all()\r\n    return HttpResponse(RecipeDetailedResponse(recipes).json)\r\n\r\n\r\n@require_http_methods([\"POST\"])\r\ndef advanced_filter_recipe(request):\r\n    request_model = SearchRecipeInfoRequest(request)\r\n    recipes = Recipe.objects.all()\r\n    if request_model.category != '':\r\n        recipes = recipes.filter(category=request_model.category)\r\n    if request_model.difficulty != '':\r\n        recipes = recipes.filter(difficulty=request_model.difficulty)\r\n    if request_model.preparation_time != '':\r\n        recipes = recipes.filter(preparation_time=request_model.preparation_time)\r\n    if request_model.meal_tags != '':\r\n        recipes = recipes.filter(meal_tags__contains=request_model.meal_tags)\r\n    for foodstuff in request_model.ingredients:\r\n        recipes = recipes.filter(ingredients__foodstuff__name=foodstuff)\r\n    return HttpResponse(ObjectListResponse(recipes).json)\r\n\r\n\r\n@require_http_methods([\"PUT\"])\r\ndef follow(request, jesus_username):\r\n    disciple_username = request.GET.get('username').replace('\"', \"\")\r\n    disciple: SystemUser = get_object_else('username', disciple_username, SystemUser)\r\n    if not disciple:\r\n        return HttpResponse(ErrorResponse(InternalError.ACCOUNT_NOT_FOUND).json)\r\n    if disciple_username == jesus_username:\r\n        return HttpResponse(ErrorResponse(InternalError.NOT_ALLOWED).json)\r\n    jesus: Chief = get_object_else('user__username', jesus_username, Chief)\r\n    if not jesus:\r\n        return HttpResponse(ErrorResponse(InternalError.ACCOUNT_NOT_FOUND).json)\r\n    if get_object_else(('jesus__user__username', 'disciple__username'), (jesus_username, disciple_username),\r\n                       Relationship, True):\r\n        return HttpResponse(ErrorResponse(InternalError.NOT_ALLOWED).json)\r\n    relationship = Relationship(jesus=jesus, disciple=disciple)\r\n    relationship.save()\r\n    disciple: SystemUser = get_object_else('username', disciple_username, SystemUser)\r\n    return HttpResponse(ObjectListResponse(disciple.relationship_set.all()).json)\r\n\r\n\r\n@require_http_methods([\"DELETE\"])\r\ndef unfollow(request, jesus_username):\r\n    disciple_username = request.GET.get('username').replace('\"', \"\")\r\n    disciple: SystemUser = get_object_else('username', disciple_username, SystemUser)\r\n    if not disciple:\r\n        return HttpResponse(ErrorResponse(InternalError.ACCOUNT_NOT_FOUND).json)\r\n    jesus: Chief = get_object_else('user__username', jesus_username, Chief)\r\n    if not jesus:\r\n        return HttpResponse(ErrorResponse(InternalError.ACCOUNT_NOT_FOUND).json)\r\n    relationship: Relationship = get_object_else(('jesus__user__username', 'disciple__username'),\r\n                                                 (jesus_username, disciple_username), Relationship)\r\n    if relationship:\r\n        relationship.delete()\r\n    disciple: SystemUser = get_object_else('username', disciple_username, SystemUser)\r\n    return HttpResponse(ObjectListResponse(disciple.relationship_set.all()).json)\r\n\r\n\r\n@require_http_methods([\"POST\", \"GET\"])\r\ndef forums(request):\r\n    if request.method == \"POST\":\r\n        return create_forum(request)\r\n    if request.method == \"GET\":\r\n        return get_forums(request)\r\n\r\n\r\ndef create_forum(request):\r\n    request_model = CreateForumRequest(request)\r\n    owner: Chief = get_object_else('user__username', request_model.owner, Chief)\r\n    if not owner:\r\n        return HttpResponse(ErrorResponse(InternalError.ACCOUNT_NOT_FOUND).json)\r\n    if get_object_else(('name', 'owner'), (request_model.name, owner), Forum, True):\r\n        return HttpResponse(ErrorResponse(InternalError.ALREADY_REPORTED).json)\r\n    forum = Forum(owner=owner, name=request_model.name)\r\n    forum.save()\r\n    return HttpResponse(CreationResponse(forum.forum_id).json)\r\n\r\n\r\ndef get_forums(request):\r\n    username, is_owned = request.GET.get('username').replace('\"', ''), bool(int(request.GET.get('owned')))\r\n    if is_owned:\r\n        chief: Chief = get_object_else('user__username', username, Chief)\r\n        if not chief:\r\n            return HttpResponse(ErrorResponse(InternalError.ACCOUNT_NOT_FOUND).json)\r\n        \r\n        return HttpResponse(ObjectListResponse(chief.forum_set.all()).json)\r\n    user: SystemUser = get_object_else('username', username, SystemUser)\r\n    if not user:\r\n        return HttpResponse(ErrorResponse(InternalError.ACCOUNT_NOT_FOUND).json)\r\n    joined_forums = []\r\n    for forum in Forum.objects.all():\r\n        if user in forum.members.all():\r\n            joined_forums.append(forum)\r\n    return HttpResponse(ObjectListResponse(joined_forums).json)\r\n\r\n\r\n@require_http_methods([\"PATCH\"])\r\ndef join_forum(request, forum_id):\r\n    username = request.GET.get('username').replace('\"', \"\")\r\n    forum: Forum = get_object_else('forum_id', forum_id, Forum)\r\n    if not forum:\r\n        return HttpResponse(ErrorResponse(InternalError.FORUM_NOT_FOUND).json)\r\n    user: SystemUser = get_object_else('username', username, SystemUser)\r\n    if not user:\r\n        return HttpResponse(ErrorResponse(InternalError.ACCOUNT_NOT_FOUND).json)\r\n    if user in forum.banned.all():\r\n        return HttpResponse(ErrorResponse(InternalError.BANNED_USER).json)\r\n    if check_forum_membership(user, forum_id):\r\n        return HttpResponse(ErrorResponse(InternalError.ALREADY_REPORTED).json)\r\n    forum.members.add(user)\r\n    forum.members_count += 1\r\n    forum.save()\r\n    return HttpResponse(ObjectListResponse(check_forum_membership(user)).json)\r\n\r\n\r\n@require_http_methods([\"PATCH\"])\r\ndef leave_forum(request, forum_id):\r\n    username = request.GET.get('username').replace('\"', \"\")\r\n    print(username)\r\n    print(forum_id)\r\n    forum: Forum = get_object_else('forum_id', forum_id, Forum)\r\n    if not forum:\r\n        return HttpResponse(ErrorResponse(InternalError.FORUM_NOT_FOUND).json)\r\n    user: SystemUser = get_object_else('username', username, SystemUser)\r\n    if not user:\r\n        return HttpResponse(ErrorResponse(InternalError.ACCOUNT_NOT_FOUND).json)\r\n    if not check_forum_membership(user, forum_id):\r\n        return HttpResponse(ErrorResponse(InternalError.ALREADY_REPORTED).json)\r\n    forum.members.remove(user)\r\n    forum.members_count -= 1\r\n    forum.save()\r\n    return HttpResponse(ObjectListResponse(check_forum_membership(user)).json)\r\n\r\n\r\n@require_http_methods([\"DELETE\"])\r\ndef ban_from_forum(request, forum_id):\r\n    owner_username = request.GET.get('owner')\r\n    username = request.GET.get('username').replace('\"', '')\r\n    forum: Forum = get_object_else('forum_id', forum_id, Forum)\r\n    if not forum:\r\n        return HttpResponse(ErrorResponse(InternalError.FORUM_NOT_FOUND).json)\r\n    if not owner_username == forum.owner.user.username:\r\n        return HttpResponse(ErrorResponse(InternalError.UNAUTHORIZED).json)\r\n    user: SystemUser = get_object_else('username', username, SystemUser)\r\n    if not user:\r\n        return HttpResponse(ErrorResponse(InternalError.ACCOUNT_NOT_FOUND).json)\r\n    if check_forum_membership(user, forum_id, banned=True):\r\n        return HttpResponse(ErrorResponse(InternalError.ALREADY_REPORTED).json)\r\n    forum.members.remove(user)\r\n    forum.banned.add(user)\r\n    forum.members_count -= 1\r\n    forum.save()\r\n    return HttpResponse(ObjectListResponse(forum.members.all()).json)\r\n\r\n\r\n@require_http_methods([\"DELETE\"])\r\ndef delete_forum(request, forum_id):\r\n    owner_username = request.GET.get('owner')\r\n    chief: Chief = get_object_else('user__username', owner_username, Chief)\r\n    if not chief:\r\n        return HttpResponse(ErrorResponse(InternalError.ACCOUNT_NOT_FOUND).json)\r\n    forum: Forum = get_object_else('forum_id', forum_id, Forum)\r\n    if not forum:\r\n        return HttpResponse(ErrorResponse(InternalError.FORUM_NOT_FOUND).json)\r\n    if owner_username != forum.owner.user.username:\r\n        return HttpResponse(ErrorResponse(InternalError.NOT_ALLOWED).json)\r\n    forum.delete()\r\n    return HttpResponse(HttpResponse(ObjectListResponse(chief.forum_set.all()).json))\r\n\r\n\r\n@require_http_methods([\"POST\"])\r\ndef post_on_forum(request, forum_id):\r\n    print(\"request: \", request)\r\n    request_model = PostOnForumRequest(request)\r\n    forum: Forum = get_object_else('forum_id', forum_id, Forum)\r\n    if not forum:\r\n        return HttpResponse(ErrorResponse(InternalError.FORUM_NOT_FOUND).json)\r\n    sender: SystemUser = get_object_else('username', request_model.sender, SystemUser)\r\n    if not sender:\r\n        return HttpResponse(ErrorResponse(InternalError.ACCOUNT_NOT_FOUND).json)\r\n    message = ForumMessage(sender=sender, text=request_model.text, forum=forum)\r\n    message.save()\r\n    return HttpResponse(ObjectListResponse(forum.forummessage_set.all()).json)\r\n\r\n\r\n@require_http_methods([\"GET\"])\r\ndef view_forum(request):\r\n    username = request.GET.get('username').replace('\"', \"\")\r\n    forum_id = request.GET.get('forumId')\r\n    user: SystemUser = get_object_else('username', username, SystemUser)\r\n    if not user:\r\n        return HttpResponse(ErrorResponse(InternalError.ACCOUNT_NOT_FOUND).json)\r\n    forum: Forum = get_object_else('forum_id', forum_id, Forum)\r\n    if not forum:\r\n        return HttpResponse(ErrorResponse(InternalError.FORUM_NOT_FOUND).json)\r\n    # if not check_forum_membership(user, forum_id):\r\n    #     return HttpResponse(ErrorResponse(InternalError.UNAUTHORIZED).json)\r\n    return HttpResponse(ForumDetailedResponse(forum).json)\r\n\r\n@require_http_methods([\"GET\"])\r\ndef exist_user_in_forum(request, forum_id):\r\n    username = request.GET.get('username').replace('\"', '')\r\n    user: SystemUser = get_object_else('username', username, SystemUser)\r\n    if not user:\r\n        return HttpResponse(ErrorResponse(InternalError.ACCOUNT_NOT_FOUND).json)\r\n    forum: Forum = get_object_else('forum_id', forum_id, Forum)\r\n    if not forum:\r\n        return HttpResponse(ErrorResponse(InternalError.FORUM_NOT_FOUND).json)\r\n    if not check_forum_membership(user, forum_id):\r\n        return HttpResponse(\"False\")\r\n    return HttpResponse(\"True\")\r\n\r\n@require_http_methods([\"POST\", \"GET\"])\r\ndef comments(request):\r\n    if request.method == \"POST\":\r\n        return post_comment(request)\r\n    if request.method == \"GET\":\r\n        return view_comments(request)\r\n\r\n\r\ndef post_comment(request):\r\n    request_model = PostCommentRequest(request)\r\n    user: SystemUser = get_object_else('username', request_model.username, SystemUser)\r\n    if not user:\r\n        return HttpResponse(ErrorResponse(InternalError.ACCOUNT_NOT_FOUND).json)\r\n    recipe: Recipe = get_object_else('recipe_id', request_model.recipe_id, Recipe)\r\n    if not recipe:\r\n        return HttpResponse(ErrorResponse(InternalError.RECIPE_NOT_FOUND).json)\r\n    comment = Comment(user=user, recipe=recipe, text=request_model.text)\r\n    comment.save()\r\n    return HttpResponse(ObjectListResponse(recipe.comment_set.all()).json)\r\n\r\n\r\ndef view_comments(request):\r\n    recipe: Recipe = get_object_else('recipe_id', request.GET.get('recipe_id'), Recipe)\r\n    if not recipe:\r\n        return HttpResponse(ErrorResponse(InternalError.RECIPE_NOT_FOUND).json)\r\n    return HttpResponse(ObjectListResponse(recipe.comment_set.all()).json)\r\n\r\n\r\n@require_http_methods([\"DELETE\"])\r\ndef delete_comment(request, comment_id):\r\n    username = request.GET.get('username').replace('\"', '')\r\n    comment: Comment = get_object_else('comment_id', comment_id, Comment)\r\n    if not comment:\r\n        return HttpResponse(ErrorResponse(InternalError.COMMENT_NOT_FOUND).json)\r\n    if comment.user.username != username:\r\n        return HttpResponse(ErrorResponse(InternalError.UNAUTHORIZED).json)\r\n    user: SystemUser = get_object_else('username', username, SystemUser)\r\n    if not user:\r\n        return HttpResponse(ErrorResponse(InternalError.ACCOUNT_NOT_FOUND).json)\r\n    recipe = comment.recipe\r\n    comment.delete()\r\n    return HttpResponse(ObjectListResponse(recipe.comment_set.all()).json)\r\n\r\n\r\n@require_http_methods([\"PATCH\"])\r\ndef rate_recipe(request, recipe_id):\r\n    request_model = RateRecipeRequest(request)\r\n    recipe: Recipe = get_object_else('recipe_id', recipe_id, Recipe)\r\n    if not recipe:\r\n        return HttpResponse(ErrorResponse(InternalError.RECIPE_NOT_FOUND).json)\r\n    username = request_model.username\r\n    if username == recipe.chief.user.username:\r\n        return HttpResponse(ErrorResponse(InternalError.CANNOT_RATE_SELF).json)\r\n    user: SystemUser = get_object_else('username', username, SystemUser)\r\n    if not user:\r\n        return HttpResponse(ErrorResponse(InternalError.ACCOUNT_NOT_FOUND).json)\r\n    if user in recipe.rated_users.all():\r\n        return HttpResponse(ErrorResponse(InternalError.RATING_TWICE).json)\r\n    recipe.rated_users.add(user)\r\n    recipe.score = (recipe.score * recipe.rate + request_model.score) / (recipe.rate + 1)\r\n    recipe.rate += 1\r\n    recipe.save()\r\n    return HttpResponse(ObjectInfoResponse(recipe).json)\r\n\r\n\r\ndef check_forum_membership(user, forum_id=None, banned=False):\r\n    if not forum_id:\r\n        joined_forums = []\r\n        for forum in Forum.objects.all():\r\n            if user in forum.members.all():\r\n                joined_forums.append(forum)\r\n        return joined_forums\r\n    forum: Forum = get_object_else('forum_id', forum_id, Forum)\r\n    if banned:\r\n        return user in forum.banned.all()\r\n    return user in forum.members.all() or forum.owner.user.username == user.username\r\n\r\n\r\ndef get_object_else(pk_name, pk, entity, check_only: bool = False):\r\n    if isinstance(pk_name, str):\r\n        kwargs = {pk_name: pk}\r\n    else:\r\n        assert (isinstance(pk_name, list) or isinstance(pk_name, tuple)) and (isinstance(pk, list) or\r\n                                                                              isinstance(pk, tuple))\r\n        assert len(pk_name) == len(pk)\r\n        kwargs = {pk_name[i]: pk[i] for i in range(len(pk_name))}\r\n    entity: models.Model\r\n    if not entity.objects.filter(**kwargs).exists():\r\n        return None\r\n    if check_only:\r\n        return True\r\n    return entity.objects.get(**kwargs)\r\n"
        }
    ]
}